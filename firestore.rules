rules_version = '2';
service cloud.firestore {
  // read = get,list  | write = created,update,delete
  // 非公開 = false
  // 未認証ユーザー非公開 = request.auth != null
  // ログインユーザーにのみ公開 = request.auth.uid == userId
  match /databases/{database}/documents {
    match /pages/{document} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    match /users/{userId} {
      allow read, write: if isUserAuthenticated(userId);

      // allow create: if request.auth.uid == request.resource.data.author_uid;
      // allow update, delete: if request.auth.uid == resource.data.author_uid;
    }

    match /cart_groups/{document} {
      allow read: if true;
    }

    match /comments/{document} {
      allow read: if true;
    }
    
    match /config/{document} {
      allow read: if true;
    }

    match /products/{document} {
      allow read: if true;
      allow write: if request.auth != null;

      //サブコレクション
      match /stocks/stock_detail {
        allow read;
        allow write: if true;
        allow update: if validateInt(incomingData().cartin);
      }

    }

    //functionで共通処理を記述
    //createとupdate時に、登録データとしてプログラム側から送られた値を返す。
    function incomingData() {
      return request.resource.data;
    }

    //updateとdelete時に、既にfirestoreにあり、更新もしくは削除されようとしているデータを返す。
    function existingData() {
      return resource.data;
    }

    //文字列の型チェックと、最小、最大チェック
    function validateString(text, min, max) {
      return text is string && min <= text.size() && text.size() <= max;
    }

    //数値型チェックと、最小、最大チェック
    function validateInt(num) {
      return num is int ;
    }

    //ログイン時のuserIdを返す
    function isUserAuthenticated(userId){
      return request.auth.uid == userId ;
    }
  }
}
